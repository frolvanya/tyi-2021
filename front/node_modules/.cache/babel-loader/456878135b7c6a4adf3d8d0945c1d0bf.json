{"ast":null,"code":"var _jsxFileName = \"/Users/frol/Documents/Scripts/TYI-2021/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const canvas = useRef();\n  let ctx = null; // initialize the canvas context\n\n  useEffect(() => {\n    // dynamically assign the width and height to canvas\n    const canvasEle = canvas.current;\n    canvasEle.width = 300;\n    canvasEle.height = 600; // get context of the canvas\n\n    ctx = canvasEle.getContext(\"2d\");\n  }, []);\n  useEffect(() => {\n    const r1Info = {\n      x: 20,\n      y: 30,\n      w: 100,\n      h: 50\n    };\n    const r1Style = {\n      borderColor: 'red',\n      borderWidth: 10\n    };\n    drawRect(r1Info, r1Style);\n    const r2Info = {\n      x: 100,\n      y: 100,\n      w: 80,\n      h: 150\n    };\n    drawRect(r2Info);\n    const r3Info = {\n      x: 250,\n      y: 80,\n      w: 80,\n      h: 120\n    };\n    drawFillRect(r3Info, {\n      backgroundColor: 'green'\n    });\n    const r4Info = {\n      x: 200,\n      y: 220,\n      w: 100,\n      h: 50\n    };\n    drawFillRect(r4Info);\n  }, []); // draw rectangle\n\n  const drawRect = (info, style = {}) => {\n    const {\n      x,\n      y,\n      w,\n      h\n    } = info;\n    const {\n      borderColor = 'black',\n      borderWidth = 1\n    } = style;\n    ctx.beginPath();\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = borderWidth;\n    ctx.rect(x, y, w, h);\n    ctx.stroke();\n  }; // draw rectangle with background\n\n\n  const drawFillRect = (info, style = {}) => {\n    const {\n      x,\n      y,\n      w,\n      h\n    } = info;\n    const {\n      backgroundColor = 'black'\n    } = style;\n    ctx.beginPath();\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(x, y, w, h);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Draw a rectangle on Canvas - \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"http://www.cluemediator.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Clue Mediator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"Uf3A04Dxr7BWd2F1n+LTI5nEQDU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/frol/Documents/Scripts/TYI-2021/front/src/App.js"],"names":["React","useRef","useEffect","App","canvas","ctx","canvasEle","current","width","height","getContext","r1Info","x","y","w","h","r1Style","borderColor","borderWidth","drawRect","r2Info","r3Info","drawFillRect","backgroundColor","r4Info","info","style","beginPath","strokeStyle","lineWidth","rect","stroke","fillStyle","fillRect"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nfunction App() {\n\tconst canvas = useRef();\n\tlet ctx = null;\n\n\t// initialize the canvas context\n\tuseEffect(() => {\n\t\t// dynamically assign the width and height to canvas\n\t\tconst canvasEle = canvas.current;\n\t\tcanvasEle.width = 300;\n\t\tcanvasEle.height = 600;\n\n\t\t// get context of the canvas\n\t\tctx = canvasEle.getContext(\"2d\");\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst r1Info = { x: 20, y: 30, w: 100, h: 50 };\n\t\tconst r1Style = { borderColor: 'red', borderWidth: 10 };\n\t\tdrawRect(r1Info, r1Style);\n\n\t\tconst r2Info = { x: 100, y: 100, w: 80, h: 150 };\n\t\tdrawRect(r2Info);\n\n\t\tconst r3Info = { x: 250, y: 80, w: 80, h: 120 };\n\t\tdrawFillRect(r3Info, { backgroundColor: 'green' });\n\n\t\tconst r4Info = { x: 200, y: 220, w: 100, h: 50 };\n\t\tdrawFillRect(r4Info);\n\t}, []);\n\n\t// draw rectangle\n\tconst drawRect = (info, style = {}) => {\n\t\tconst { x, y, w, h } = info;\n\t\tconst { borderColor = 'black', borderWidth = 1 } = style;\n\n\t\tctx.beginPath();\n\t\tctx.strokeStyle = borderColor;\n\t\tctx.lineWidth = borderWidth;\n\t\tctx.rect(x, y, w, h);\n\t\tctx.stroke();\n\t}\n\n\t// draw rectangle with background\n\tconst drawFillRect = (info, style = {}) => {\n\t\tconst { x, y, w, h } = info;\n\t\tconst { backgroundColor = 'black' } = style;\n\n\t\tctx.beginPath();\n\t\tctx.fillStyle = backgroundColor;\n\t\tctx.fillRect(x, y, w, h);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h3>Draw a rectangle on Canvas - <a href=\"http://www.cluemediator.com\" target=\"_blank\" rel=\"noopener noreferrer\">Clue Mediator</a></h3>\n\t\t\t<canvas ref={canvas}></canvas>\n\t\t</div>\n\t);\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}