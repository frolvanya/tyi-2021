{"ast":null,"code":"var _jsxFileName = \"/Users/frol/Documents/Scripts/TYI-2021/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const canvas = useRef();\n  let ctx = useRef(null); // initialize the canvas context\n\n  useEffect(() => {\n    // dynamically assign the width and height to canvas\n    const canvasEle = canvas.current;\n    canvasEle.width = canvasEle.clientWidth;\n    canvasEle.height = canvasEle.clientHeight; // get context of the canvas\n\n    ctx = canvasEle.getContext(\"2d\");\n  }, []);\n  useEffect(() => {\n    drawLine({\n      x: 20,\n      y: 20,\n      x1: 20,\n      y1: 100\n    });\n  }, []); // draw a line\n\n  const drawLine = (info, style = {}) => {\n    const {\n      x,\n      y,\n      x1,\n      y1\n    } = info;\n    const {\n      color = 'black',\n      width = 1\n    } = style;\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x1, y1);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Draw a line on Canvas - \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"http://www.cluemediator.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Clue Mediator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"eqaz6PoL/KDfnEMgQiBbMjxX7Dc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/frol/Documents/Scripts/TYI-2021/front/src/App.js"],"names":["React","useRef","useEffect","App","canvas","ctx","canvasEle","current","width","clientWidth","height","clientHeight","getContext","drawLine","x","y","x1","y1","info","style","color","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAMC,MAAM,GAAGH,MAAM,EAArB;AACA,MAAII,GAAG,GAAGJ,MAAM,CAAC,IAAD,CAAhB,CAFc,CAId;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACf;AACA,UAAMI,SAAS,GAAGF,MAAM,CAACG,OAAzB;AACAD,IAAAA,SAAS,CAACE,KAAV,GAAkBF,SAAS,CAACG,WAA5B;AACAH,IAAAA,SAAS,CAACI,MAAV,GAAmBJ,SAAS,CAACK,YAA7B,CAJe,CAMf;;AACAN,IAAAA,GAAG,GAAGC,SAAS,CAACM,UAAV,CAAqB,IAArB,CAAN;AACA,GARQ,EAQN,EARM,CAAT;AAUAV,EAAAA,SAAS,CAAC,MAAM;AACfW,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,CAAC,EAAE,EAAL;AAASC,MAAAA,CAAC,EAAE,EAAZ;AAAgBC,MAAAA,EAAE,EAAE,EAApB;AAAwBC,MAAAA,EAAE,EAAE;AAA5B,KAAD,CAAR;AACA,GAFQ,EAEN,EAFM,CAAT,CAfc,CAmBd;;AACA,QAAMJ,QAAQ,GAAG,CAACK,IAAD,EAAOC,KAAK,GAAG,EAAf,KAAsB;AACtC,UAAM;AAAEL,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQC,MAAAA,EAAR;AAAYC,MAAAA;AAAZ,QAAmBC,IAAzB;AACA,UAAM;AAAEE,MAAAA,KAAK,GAAG,OAAV;AAAmBZ,MAAAA,KAAK,GAAG;AAA3B,QAAiCW,KAAvC;AAEAd,IAAAA,GAAG,CAACgB,SAAJ;AACAhB,IAAAA,GAAG,CAACiB,MAAJ,CAAWR,CAAX,EAAcC,CAAd;AACAV,IAAAA,GAAG,CAACkB,MAAJ,CAAWP,EAAX,EAAeC,EAAf;AACAZ,IAAAA,GAAG,CAACmB,WAAJ,GAAkBJ,KAAlB;AACAf,IAAAA,GAAG,CAACoB,SAAJ,GAAgBjB,KAAhB;AACAH,IAAAA,GAAG,CAACqB,MAAJ;AACA,GAVD;;AAYA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACC;AAAA,0DAA4B;AAAG,QAAA,IAAI,EAAC,6BAAR;AAAsC,QAAA,MAAM,EAAC,QAA7C;AAAsD,QAAA,GAAG,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAQ,MAAA,GAAG,EAAEtB;AAAb;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAMA;;GAtCQD,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nfunction App() {\n\tconst canvas = useRef();\n\tlet ctx = useRef(null);\n\n\t// initialize the canvas context\n\tuseEffect(() => {\n\t\t// dynamically assign the width and height to canvas\n\t\tconst canvasEle = canvas.current;\n\t\tcanvasEle.width = canvasEle.clientWidth;\n\t\tcanvasEle.height = canvasEle.clientHeight;\n\n\t\t// get context of the canvas\n\t\tctx = canvasEle.getContext(\"2d\");\n\t}, []);\n\n\tuseEffect(() => {\n\t\tdrawLine({ x: 20, y: 20, x1: 20, y1: 100 });\n\t}, []);\n\n\t// draw a line\n\tconst drawLine = (info, style = {}) => {\n\t\tconst { x, y, x1, y1 } = info;\n\t\tconst { color = 'black', width = 1 } = style;\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(x, y);\n\t\tctx.lineTo(x1, y1);\n\t\tctx.strokeStyle = color;\n\t\tctx.lineWidth = width;\n\t\tctx.stroke();\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h3>Draw a line on Canvas - <a href=\"http://www.cluemediator.com\" target=\"_blank\" rel=\"noopener noreferrer\">Clue Mediator</a></h3>\n\t\t\t<canvas ref={canvas}></canvas>\n\t\t</div>\n\t);\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}